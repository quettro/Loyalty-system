# Generated by Django 3.2.6 on 2022-02-08 14:58

import apps.base.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_json_field_schema_validator.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Audience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('is_use_age', models.BooleanField(default=False, verbose_name='Исп. фильтрацию по возрасту?')),
                ('min_age', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Минимальный возраст')),
                ('max_age', models.PositiveSmallIntegerField(default=100, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Максимальный возраст')),
                ('is_use_birthday', models.BooleanField(default=False, verbose_name='Исп. фильтрацию по дню рождения?')),
                ('min_birthday', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Минимальное число дня рождения')),
                ('max_birthday', models.PositiveSmallIntegerField(default=31, validators=[django.core.validators.MaxValueValidator(31)], verbose_name='Максимальное число дня рождения')),
                ('is_use_days_from_registration', models.BooleanField(default=False, verbose_name='Исп. фильтрацию по кол-ву дней с момента регистрации?')),
                ('min_days_from_registration', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Минимальное кол-во дней с момента регистрации')),
                ('max_days_from_registration', models.PositiveSmallIntegerField(default=3650, validators=[django.core.validators.MaxValueValidator(3650)], verbose_name='Максимальное кол-во дней с момента регистрации')),
                ('is_use_average_check', models.BooleanField(default=False, verbose_name='Исп. фильтрацию по среднему чеку?')),
                ('min_average_check', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Минимальный средний чек')),
                ('max_average_check', models.PositiveSmallIntegerField(default=30000, validators=[django.core.validators.MaxValueValidator(30000)], verbose_name='Максимальный средний чек')),
                ('is_use_visits', models.BooleanField(default=False, verbose_name='Исп. фильтрацию по кол-во визитам?')),
                ('min_visits', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Минимальное кол-во визитов')),
                ('max_visits', models.PositiveSmallIntegerField(default=10000, validators=[django.core.validators.MaxValueValidator(10000)], verbose_name='Максимальное кол-во визитов')),
                ('sex', models.CharField(choices=[('MAN', 'Мужской'), ('WOMAN', 'Женский'), ('ALL', 'Все')], max_length=10, verbose_name='Пол')),
                ('device', models.CharField(choices=[('ANDROID', 'Android'), ('IOS', 'iOS'), ('ALL', 'Все устройства')], max_length=20, verbose_name='Устройство')),
                ('is_visited_the_institution', models.BooleanField(default=False, verbose_name='Посещал заведение?')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Аудитория',
                'verbose_name_plural': 'Аудитории',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('CREDIT', 'Зачисление'), ('DEBIT', 'Списание')], max_length=20, verbose_name='Тип операции')),
                ('count', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Кол-во баллов для зачисления/списания')),
                ('message', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Примечание')),
                ('is_burned_bonuses', models.BooleanField(default=False, verbose_name='Сгорели ли бонусы?')),
                ('expires_at', models.DateField(blank=True, null=True, verbose_name='Срок действия баллов до')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Транзакция баллов',
                'verbose_name_plural': 'Транзакции баллов',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Cert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('p12_cert', models.FileField(upload_to='certs/.p12/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['p12'])], verbose_name='(.p12) Сертификат')),
                ('p12_password', models.CharField(max_length=255, verbose_name='(.p12) Пароль')),
                ('p12_cert_pem', models.FileField(blank=True, null=True, upload_to='certs/.p12/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pem'])], verbose_name='(.p12) Сертификат.pem')),
                ('p12_cert_key', models.FileField(blank=True, null=True, upload_to='certs/.p12/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['key'])], verbose_name='(.p12) Сертификат.key')),
                ('p12_organization_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='(.p12) Организация')),
                ('p12_team_identifier', models.CharField(blank=True, max_length=255, null=True, verbose_name='(.p12) Подразделение')),
                ('p12_pass_type_identifier', models.CharField(blank=True, max_length=255, null=True, verbose_name='(.p12) Идентификатор пользователя')),
                ('p12_activated_at', models.DateTimeField(blank=True, null=True, verbose_name='Отметка времени, с которой сертификат начинает действовать')),
                ('p12_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Отметка времени, при которой сертификат перестает быть действительным')),
                ('p8_cert', models.FileField(upload_to='certs/.p8/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['p8'])], verbose_name='(.p8) Сертификат')),
                ('p8_key', models.CharField(max_length=255, verbose_name='(.p8) Идентификатор ключа (Key ID)')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Сертификат IOS',
                'verbose_name_plural': 'Сертификаты IOS',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authentication_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Токен авторизации')),
                ('numbers', models.CharField(editable=False, max_length=255, null=True, unique=True, verbose_name='Номер карты')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование карты')),
                ('sex', models.CharField(choices=[('MAN', 'Мужской'), ('WOMAN', 'Женский')], max_length=10, verbose_name='Пол')),
                ('birthday', models.DateField(verbose_name='Дата рождения')),
                ('phone', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Номер телефона необходимо вводить в формате: 7XXXXXXXXXX. Допускается до 11-ти цифр.', regex='^7([0-9]{10})$')], verbose_name='Номер телефона')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Баланс')),
                ('c_stamps', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Сколько всего штампов было получено')),
                ('a_stamps', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Активных штампов')),
                ('a_rewards', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Активных наград')),
                ('pkpass', models.FileField(blank=True, editable=False, null=True, upload_to='clients/', validators=[django.core.validators.FileExtensionValidator(['pkpass'])], verbose_name='PkPass')),
                ('is_welcome_bonuses_received', models.BooleanField(default=False, verbose_name='Получил ли приветственные бонусы?')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата удаления карты (Мягкое удаление)')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ClientTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2147000000)], verbose_name='Номер чека')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость покупки')),
                ('percent', models.PositiveSmallIntegerField(blank=True, help_text='Минимальный процент: 0%, Максимальный процент: 100%. Если оставить данное поле пустым, то значение будет рассчитано автоматически.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='% Кэшбэка/Скидки')),
                ('message', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Примечание')),
                ('is_auto_add_bonuses', models.BooleanField(default=False, verbose_name='Зачислить баллы автоматически?')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Транзакция клиента',
                'verbose_name_plural': 'Транзакции клиентов',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('inn', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(message='ИНН необходимо вводить в формате: XXXXXXXXXX. Допускается до 12-ти цифр.', regex='^[0-9]{10,12}$')], verbose_name='ИНН')),
                ('bik', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Бик необходимо вводить в формате: XXXXXXXXX. Допускается до 9-ти цифр.', regex='^[0-9]{9}$')], verbose_name='Бик')),
                ('rs', models.CharField(max_length=21, validators=[django.core.validators.RegexValidator(message='Р/с необходимо вводить в формате: XXXXXXXXXXXXXXXXXXXX. Допускается до 20-ти цифр.', regex='^[0-9]{20}$')], verbose_name='Расчётный счёт (Р/с)')),
                ('ks', models.CharField(max_length=21, validators=[django.core.validators.RegexValidator(message='К/с необходимо вводить в формате: XXXXXXXXXXXXXXXXXXXX. Допускается до 20-ти цифр.', regex='^[0-9]{20}$')], verbose_name='Корреспонденский счёт (К/с)')),
                ('yur_address', models.CharField(max_length=255, verbose_name='Юридический адрес')),
                ('fact_address', models.CharField(max_length=255, verbose_name='Фактический адрес')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Заметка')),
                ('pincode', models.CharField(help_text='Пин-код, необходимо вводить в формате: 0000.', max_length=5, validators=[django.core.validators.RegexValidator(message='Пин-код необходимо вводить в формате: XXXX. Допускается до 4-х цифр.', regex='^[0-9]{4}$')], verbose_name='Пин-код')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='IncreasedPercentage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent', models.PositiveSmallIntegerField(default=0, help_text='Минимальный процент: 0%, Максимальный процент: 100%.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='% Кэшбэка/Скидки')),
                ('activated_at', models.DateField(verbose_name='Дата начала')),
                ('expires_at', models.DateField(verbose_name='Дата окончания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Повышенный процент',
                'verbose_name_plural': 'Повышенные проценты',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_name', models.CharField(max_length=255, verbose_name='Наименование заведения')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес заведения')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Баланс')),
                ('locations', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Кол-во точек')),
                ('is_show_client_phones', models.BooleanField(default=False, verbose_name='Партнер может видеть номера телефонов клиентов?')),
                ('is_negative_balance', models.BooleanField(default=False, verbose_name='Разрешить отрицательный баланс?')),
                ('limit_negative_balance', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Лимит отрицательного баланса')),
                ('debiting_subscription_fee', models.CharField(choices=[('DAILY', 'Ежедневно равными частями'), ('MONTHLY', 'Ежемесячно')], max_length=30, verbose_name='Списание абон. платы')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='base.company', verbose_name='Компания')),
            ],
            options={
                'verbose_name': 'Партнер',
                'verbose_name_plural': 'Партнеры',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='PartnerType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Наименование (ООО, ИП)')),
            ],
            options={
                'verbose_name': 'Тип партнера',
                'verbose_name_plural': 'Типы партнеров',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Например: Добавление товаров', max_length=255, unique=True, verbose_name='Наименование')),
                ('codename', models.CharField(help_text='Например: add_products', max_length=255, unique=True, verbose_name='Кодовое наименование')),
                ('is_partners', models.BooleanField(default=False, verbose_name='Доступ к данному разделу имеют только партнеры?')),
            ],
            options={
                'verbose_name': 'Доступ',
                'verbose_name_plural': 'Доступы',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(max_length=255, verbose_name='Название карты')),
                ('snumbers', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Стартовый номер карты необходимо вводить в формате: XXXXXX. Допускается до 6-ти цифр.', regex='^([0-9]{1,6})$')], verbose_name='Стартовый номер карты')),
                ('type', models.CharField(choices=[('DISCOUNT', 'Скидочная карта'), ('BONUS', 'Бонусная карта'), ('CHOP', 'Чоп-карта')], max_length=20, verbose_name='Тип создаваемой карты')),
                ('discount', models.PositiveSmallIntegerField(default=0, help_text='Минимальная скидка: 0%, Максимальная скидка: 100%. Необходимо указывать, если тип карты: Скидочная карта', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Базовая скидка')),
                ('cashback', models.PositiveSmallIntegerField(default=0, help_text='Минимальный кэшбэк: 0%, Максимальный кэшбэк: 100%. Необходимо указывать, если тип карты: Бонусная карта', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Базовый кэшбэк')),
                ('conversion', models.PositiveSmallIntegerField(default=1, help_text='Скольким баллам равен один рубль. Необходимо указывать, если тип карты: Бонусная карта', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30000)], verbose_name='Конверсия баллов')),
                ('is_use_welcome_bonuses', models.BooleanField(default=False, help_text='Необходимо указывать, если тип карты: Бонусная карта', verbose_name='Начислять приветственные баллы?')),
                ('bonuses', models.DecimalField(decimal_places=2, default=0, help_text='Необходимо указывать, если тип карты: Бонусная карта', max_digits=12, verbose_name='Количество начисляемых баллов')),
                ('is_immediately_transfer_bonuses', models.BooleanField(default=False, help_text='Необходимо указывать, если тип карты: Бонусная карта', verbose_name='Начислить приветственные баллы сразу?')),
                ('min_expenditure_obtaining_bonuses', models.DecimalField(decimal_places=2, default=0, help_text='Необходимо указывать, если тип карты: Бонусная карта', max_digits=12, verbose_name='Сумма расходов для начисления')),
                ('is_burn_bonuses', models.BooleanField(default=False, help_text='Необходимо указывать, если тип карты: Бонусная карта', verbose_name='Использовать сгорание баллов?')),
                ('validity_period_of_bonuses', models.PositiveSmallIntegerField(default=1, help_text='Необходимо указывать, если тип карты: Бонусная карта', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30000)], verbose_name='Количество дней после которых баллы сгорают')),
                ('stamps', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Кол-во штампов')),
                ('is_unlimited', models.BooleanField(default=False, verbose_name='Безлимитная ли акция?')),
                ('is_message_about_bonus_received_displayed', models.BooleanField(default=False, verbose_name='Отображается ли сообщение о полученном бонусе?')),
                ('active_stamp_icon', apps.base.fields.LimitedImageField(blank=True, help_text='Разрешение иконки должен составлять 180 x 180 пикселей. Допустимые форматы файла: .png. Максимальный размер одного файла не более 1 Мб.', null=True, upload_to='wallets/stamps/active/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['png'])], verbose_name='Активная иконка штампа')),
                ('nonactive_stamp_icon', apps.base.fields.LimitedImageField(blank=True, help_text='Разрешение иконки должен составлять 180 x 180 пикселей. Допустимые форматы файла: .png. Максимальный размер одного файла не более 1 Мб. Если оставить данное поле пустым, то `Активная иконка штампа` автоматически будет затемнена.', null=True, upload_to='wallets/stamps/nonactive/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['png'])], verbose_name='Не активная иконка штампа')),
                ('finish_stamp_icon', apps.base.fields.LimitedImageField(blank=True, help_text='Разрешение иконки должен составлять 180 x 180 пикселей. Допустимые форматы файла: .png. Максимальный размер одного файла не более 1 Мб. Если оставить данное поле пустым, то будет использовано `Активная иконка штампа` или `Не активная иконка штампа`.', null=True, upload_to='wallets/stamps/finish/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['png'])], verbose_name='Финишная иконка штампа')),
                ('is_use_push_for_geolocation', models.BooleanField(default=False, verbose_name='Отправлять уведомления пользователям по геолокации?')),
                ('geolocations', models.JSONField(blank=True, help_text='Необходимо указывать, если включены уведомления пользователям по геолокации. Правильный пример: [{"longitude": 0, "latitude": 0, "message": "Добро пожаловать!"}]', null=True, validators=[django_json_field_schema_validator.validators.JSONFieldSchemaValidator({'$schema': 'http://json-schema.org/draft-04/schema#', 'items': {'additionalProperties': False, 'maxItems': 10, 'minItems': 1, 'properties': {'latitude': {'type': 'number'}, 'longitude': {'type': 'number'}, 'message': {'minLength': 1, 'type': 'string'}}, 'required': ['longitude', 'latitude', 'message'], 'type': 'object'}, 'type': 'array'})], verbose_name='Данные геолокации в JSON формате')),
                ('icon', apps.base.fields.LimitedImageField(help_text='Минимальный размер файла 87 х 87 пикселя. Допустимые форматы файла: .png. Максимальный размер одного файла не более 1 Мб.', upload_to='wallets/icons/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['png'])], verbose_name='Иконка')),
                ('logotype', apps.base.fields.LimitedImageField(help_text='Максимальный размер файла 480 х 150 пикселя. Допустимые форматы файла: png. Максимальный размер одного файла не более 1 Мб.', upload_to='wallets/logotypes/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['png'])], verbose_name='Логотип')),
                ('background_image', apps.base.fields.LimitedImageField(help_text='Минимальный и максимальный размер файла 1125 х 432 пикселя. Допустимые форматы файла: jpg, jpeg. Максимальный размер одного файла не более 1 Мб.', upload_to='wallets/backgrounds/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg'])], verbose_name='Фоновое изображение')),
                ('frontend', models.JSONField(validators=[django_json_field_schema_validator.validators.JSONFieldSchemaValidator({'$schema': 'http://json-schema.org/draft-04/schema#', 'properties': {'auxiliary_fields': {'items': {'additionalProperties': False, 'properties': {'key': {'minLength': 1, 'type': 'string'}, 'label': {'minLength': 1, 'type': 'string'}, 'value': {'minLength': 1, 'type': 'string'}}, 'required': ['key', 'value', 'label'], 'type': 'object'}, 'type': 'array'}, 'background_color': {'pattern': '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', 'type': 'string'}, 'barcode_format': {'enum': ('PKBarcodeFormatQR', 'PKBarcodeFormatPDF417'), 'type': 'string'}, 'foreground_color': {'pattern': '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', 'type': 'string'}, 'header_fields': {'items': {'additionalProperties': False, 'properties': {'key': {'minLength': 1, 'type': 'string'}, 'label': {'minLength': 1, 'type': 'string'}, 'value': {'minLength': 1, 'type': 'string'}}, 'required': ['key', 'value', 'label'], 'type': 'object'}, 'type': 'array'}, 'is_show_the_number_card': {'type': 'boolean'}, 'label_color': {'pattern': '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', 'type': 'string'}, 'logo_text': {'minLength': 1, 'type': 'string'}, 'primary_fields': {'items': {'additionalProperties': False, 'properties': {'key': {'minLength': 1, 'type': 'string'}, 'label': {'minLength': 1, 'type': 'string'}, 'value': {'minLength': 1, 'type': 'string'}}, 'required': ['key', 'value', 'label'], 'type': 'object'}, 'type': 'array'}, 'secondary_fields': {'items': {'additionalProperties': False, 'properties': {'key': {'minLength': 1, 'type': 'string'}, 'label': {'minLength': 1, 'type': 'string'}, 'value': {'minLength': 1, 'type': 'string'}}, 'required': ['key', 'value', 'label'], 'type': 'object'}, 'type': 'array'}}, 'required': ['logo_text', 'background_color', 'label_color', 'foreground_color', 'barcode_format', 'is_show_the_number_card'], 'type': 'object'})], verbose_name='Передняя часть карты')),
                ('backend', models.JSONField(validators=[django_json_field_schema_validator.validators.JSONFieldSchemaValidator({'$schema': 'http://json-schema.org/draft-04/schema#', 'properties': {'activation_message': {'minLength': 1, 'type': 'string'}, 'associatedStoreIdentifiers': {'items': {'type': 'integer'}, 'type': 'array'}, 'back_fields': {'items': {'additionalProperties': False, 'properties': {'key': {'minLength': 1, 'type': 'string'}, 'label': {'minLength': 1, 'type': 'string'}, 'value': {'minLength': 1, 'type': 'string'}}, 'required': ['key', 'value', 'label'], 'type': 'object'}, 'maxItems': 5, 'minItems': 1, 'type': 'array'}, 'is_use_feedback_system': {'type': 'boolean'}, 'push': {'properties': {'title': {'minLength': 1, 'type': 'string'}}, 'required': ['title'], 'type': 'object'}, 'sharingProhibited': {'type': 'boolean'}}, 'required': ['push', 'back_fields', 'activation_message', 'sharingProhibited', 'is_use_feedback_system'], 'type': 'object'})], verbose_name='Задняя часть карты')),
                ('expires_at', models.DateField(blank=True, null=True, verbose_name='Срок действия карты до')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата удаления карты (Мягкое удаление)')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('cert', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='wallets', to='base.cert', verbose_name='Сертификат IOS')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='wallets', to='base.partner', verbose_name='Партнер')),
            ],
            options={
                'verbose_name': 'Карта',
                'verbose_name_plural': 'Карты',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Токен')),
                ('phone', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Номер телефона необходимо вводить в формате: 7XXXXXXXXXX. Допускается до 11-ти цифр.', regex='^7([0-9]{10})$')], verbose_name='Номер телефона')),
                ('smsc_id', models.PositiveIntegerField(default=0, verbose_name='Идентификатор сообщения в сервисе smsc.ru')),
                ('code', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(message='Код необходимо вводить в формате: XXXX. Допускается до 4-х цифр.', regex='^[0-9]{4}$')], verbose_name='Код')),
                ('status', models.CharField(choices=[('CONFIRMED', 'Подтверждён'), ('NOT_CONFIRMED', 'Не подтверждён')], max_length=20, verbose_name='Статус')),
                ('is_used', models.BooleanField(default=False, verbose_name='Использован ли номер телефона?')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='verifications', to='base.partner', verbose_name='Партнер')),
            ],
            options={
                'verbose_name': 'Верификация',
                'verbose_name_plural': 'Верификации',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('description', models.TextField(max_length=2048, verbose_name='Описание')),
                ('icon', apps.base.fields.LimitedImageField(help_text='Допустимые форматы файла: png, jpg. Максимальный размер одного файла не более 1 Мб.', upload_to='triggers/icons/%Y/%m/%d/', verbose_name='Иконка')),
                ('is_send_push_notifications', models.BooleanField(default=False, verbose_name='Отправить пуш уведомления?')),
                ('message_for_push_notifications', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Текст рассылки')),
                ('is_add_bonuses', models.BooleanField(default=False, verbose_name='Начислить баллы?')),
                ('bonuses', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Кол-во баллов для начисления')),
                ('is_increased_percentage', models.BooleanField(default=False, verbose_name='Повышенный кешбек/скидка?')),
                ('percent', models.PositiveSmallIntegerField(default=0, help_text='Минимальный процент: 0%, Максимальный процент: 100%.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='% Кэшбэка/Скидки')),
                ('days_before_the_event', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Дней повышенного кэшбэка/скидки до события')),
                ('days_after_the_event', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Дней повышенного кэшбэка/скидки после события')),
                ('is_repeat_every_year', models.BooleanField(default=False, verbose_name='Повторять событие каждый год?')),
                ('launch_at', models.DateTimeField(verbose_name='Дата и время запуска')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('audience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='triggers', to='base.audience', verbose_name='Аудитория')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='triggers', to='base.wallet', verbose_name='Карта')),
            ],
            options={
                'verbose_name': 'Триггерная рассылка',
                'verbose_name_plural': 'Триггерные рассылки',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('max_clients', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Макс. кол-во клиентов')),
                ('cost_additional_client', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость дополнительного клиента')),
                ('max_templates', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Макс. кол-во шаблонов карт')),
                ('is_use_push_for_geolocation', models.BooleanField(default=False, verbose_name='Используются ли PUSH уведомления по геолокации?')),
                ('push_limits', models.CharField(default='0;0;0', help_text='Лимиты PUSH, необходимо вводить в формате: Час;День;Месяц', max_length=24, validators=[django.core.validators.RegexValidator(message='Лимиты PUSH необходимо вводить в формате: X;X;X. Допускается до 7-и цифр.', regex='^([0-9]{1,7});([0-9]{1,7});([0-9]{1,7})$')], verbose_name='Лимиты PUSH')),
                ('is_use_api', models.BooleanField(default=False, verbose_name='Используется ли API?')),
                ('api_requests_limits', models.CharField(default='0;0', help_text='Лимиты API, необходимо вводить в формате: Час;День', max_length=16, validators=[django.core.validators.RegexValidator(message='Лимиты API необходимо вводить в формате: X;X. Допускается до 7-и цифр.', regex='^([0-9]{1,7});([0-9]{1,7})$')], verbose_name='Лимиты API')),
                ('is_use_sms', models.BooleanField(default=False, verbose_name='Используются ли SMS сообщения?')),
                ('is_use_sending_cards_by_sms', models.BooleanField(default=False, verbose_name='СМС отправка карт')),
                ('cost_sms_message', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость SMS сообщения')),
                ('cost_of_verification_by_call', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость верификации звонком')),
                ('count_verifications_included_in_the_price', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Кол-во верификаций включенных в стоимость')),
                ('is_personal_manager', models.BooleanField(default=False, verbose_name='Личный менеджер')),
                ('is_importing_client_database', models.BooleanField(default=False, verbose_name='Разрешить импорт клиентской базы?')),
                ('is_white_label', models.BooleanField(default=False, verbose_name='While label')),
                ('payment', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ежемесячная/Ежедневная оплата')),
                ('discounts', models.CharField(default='0;0;0', help_text='Скидки на оплату, необходимо вводить в формате: 3 месяца;6 месяцев;Год', max_length=12, validators=[django.core.validators.RegexValidator(message='Скидки необходимо вводить в формате: 0;0;0. Допускается до 3-х цифр.', regex='^([0-9]{1,3});([0-9]{1,3});([0-9]{1,3})$')], verbose_name='Скидки на оплату')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tariffs', to='base.partner', verbose_name='Партнер')),
                ('permissions', models.ManyToManyField(related_name='tariffs', to='base.Permission', verbose_name='Доступы к разделам')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('percent', models.PositiveSmallIntegerField(help_text='Минимальный процент: 0%, Максимальный процент: 100%.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='% Кэшбэка/Скидки')),
                ('expenses', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Сумма покупок')),
                ('visits', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30000)], verbose_name='Кол-во визитов')),
                ('number_of_days_with_us', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30000)], verbose_name='Кол-во дней с момента регистрации')),
                ('is_by_default', models.BooleanField(default=False, verbose_name='По умолчанию')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='statuses', to='base.wallet', verbose_name='Карта партнера')),
            ],
            options={
                'verbose_name': 'Статус карты',
                'verbose_name_plural': 'Статусы карт',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Stamp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('CREDIT', 'Зачисление'), ('DEBIT', 'Списание')], max_length=20, verbose_name='Тип операции')),
                ('count', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30000)], verbose_name='Кол-во штампов для зачисления/списания')),
                ('message', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Примечание')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='t_stamps', to='base.client', verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Транзакция штампов',
                'verbose_name_plural': 'Транзакции штампов',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.wallet', verbose_name='Карта партнера')),
            ],
            options={
                'verbose_name': 'Категория услуг',
                'verbose_name_plural': 'Категории услуг',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость')),
                ('is_use_cashback', models.BooleanField(default=False, verbose_name='Использовать скидки/кешбэк?')),
                ('is_show', models.BooleanField(default=False, verbose_name='Отображать сервис?')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='base.servicecategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('CREDIT', 'Зачисление'), ('DEBIT', 'Списание')], max_length=20, verbose_name='Тип операции')),
                ('count', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)], verbose_name='Кол-во наград для зачисления/списания')),
                ('message', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Примечание')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='t_rewards', to='base.client', verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Транзакция наград',
                'verbose_name_plural': 'Транзакции наград',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(verbose_name='Ip адрес')),
                ('message', models.TextField(max_length=2048, verbose_name='Сообщение')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Рейтинг')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reviews', to='base.client', verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_library_id', models.CharField(editable=False, max_length=255, null=True, verbose_name='Уникальный идентификатор устройства')),
                ('push_token', models.CharField(editable=False, max_length=255, null=True, verbose_name='Пуш токен')),
                ('os_family', models.CharField(editable=False, max_length=255, null=True, verbose_name='Операционная система')),
                ('os_version', models.CharField(editable=False, max_length=255, null=True, verbose_name='Версия операционной системы')),
                ('device_family', models.CharField(editable=False, max_length=255, null=True, verbose_name='Устройство')),
                ('device_brand', models.CharField(editable=False, max_length=255, null=True, verbose_name='Бренд устройства')),
                ('device_model', models.CharField(editable=False, max_length=255, null=True, verbose_name='Модель устройства')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='registrations', to='base.client', verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройства',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Push',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.UUIDField(blank=True, editable=False, null=True, verbose_name='Идентификатор задачи')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('message', models.TextField(max_length=2048, verbose_name='Текст рассылки')),
                ('status', models.CharField(choices=[('WAITING', 'Ожидание'), ('PROCESSING', 'В обработке'), ('COMPLETED', 'Завершено')], default='WAITING', max_length=20, verbose_name='Статус')),
                ('is_send_immediately', models.BooleanField(default=False, verbose_name='Отправить немедленно?')),
                ('send_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время отправки')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('audience', models.ForeignKey(blank=True, help_text='Если оставить данное поле пустым, то пуш уведомления будут отправлены всем активным клиентам выбранной карты.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='push', to='base.audience', verbose_name='Аудитория')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='push', to='base.wallet', verbose_name='Карта партнера')),
            ],
            options={
                'verbose_name': 'Пуш уведомление',
                'verbose_name_plural': 'Пуш уведомления',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.wallet', verbose_name='Карта партнера')),
            ],
            options={
                'verbose_name': 'Категория товара',
                'verbose_name_plural': 'Категории товаров',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Стоимость')),
                ('is_use_cashback', models.BooleanField(default=False, verbose_name='Использовать скидки/кешбэк?')),
                ('is_show', models.BooleanField(default=False, verbose_name='Отображать товар?')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='base.productcategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='PartnerTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('CREDIT', 'Зачисление средств'), ('DEBIT', 'Списание средств')], max_length=20, verbose_name='Тип операции')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Сумма для зачисления/списания')),
                ('balance', models.DecimalField(decimal_places=2, editable=False, max_digits=12, verbose_name='Баланс')),
                ('message', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Примечание')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='base.partner', verbose_name='Партнер')),
            ],
            options={
                'verbose_name': 'Транзакция партнера',
                'verbose_name_plural': 'Транзакции партнеров',
                'ordering': ('-id',),
            },
        ),
        migrations.AddField(
            model_name='partner',
            name='tariff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partners', to='base.tariff', verbose_name='Тариф'),
        ),
        migrations.AddField(
            model_name='partner',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='partners', to='base.partnertype', verbose_name='Тип партнера'),
        ),
    ]
